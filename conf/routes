# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /health   controllers.HealthController.health

GET     /public                     controllers.FrontendController.public
GET     /priv                       controllers.FrontendController.priv
GET     /priv2                      controllers.FrontendController.priv2
GET     /priv-play                  controllers.FrontendController.privPlay
POST    /login                      controllers.FrontendController.login
#GET     /login                      controllers.FrontendController.login(username, password)
GET     /logout                     controllers.FrontendController.logout
GET     /login_or_signup            controllers.FrontendController.login_or_signup
POST    /signup                     controllers.FrontendController.signup

# Handle Requests to the Server's root, and supply the Angular SPA
GET     /         controllers.FrontendController.index()


# serve the API v1 Specification
# TODO search-input URL path partially "behind" solrIndexId path component and partially not
GET     /api/v1/featureToggles                                  controllers.ApiController.getFeatureToggles
GET     /api/v1/solr-index                                      controllers.ApiController.listAllSolrIndeces
GET     /api/v1/solr-index/:solrIndexId                         controllers.ApiController.getSolrIndex(solrIndexId: String)
PUT     /api/v1/solr-index                                      controllers.ApiController.addNewSolrIndex
DELETE  /api/v1/solr-index/:solrIndexId                         controllers.ApiController.deleteSolrIndex(solrIndexId: String)
GET     /api/v1/inputTags                                       controllers.ApiController.listAllInputTags
GET     /api/v1/:solrIndexId/search-input                       controllers.ApiController.listAllSearchInputs(solrIndexId: String)
GET     /api/v1/solr-index/:solrIndexId/team                    controllers.ApiController.lookupTeamIdsBySolrIndexId(solrIndexId: String)
GET     /api/v1/search-input/:searchInputId                     controllers.ApiController.getDetailedSearchInput(searchInputId: String)
PUT     /api/v1/:solrIndexId/search-input                       controllers.ApiController.addNewSearchInput(solrIndexId: String)
POST    /api/v1/search-input/:searchInputId                     controllers.ApiController.updateSearchInput(searchInputId: String)
DELETE  /api/v1/search-input/:searchInputId                     controllers.ApiController.deleteSearchInput(searchInputId: String)
POST    /api/v1/:solrIndexId/rules-txt/:targetPlatform          controllers.ApiController.updateRulesTxtForSolrIndexAndTargetPlatform(solrIndexId: String, targetPlatform: String)
GET     /api/v1/:solrIndexId/suggested-solr-field               controllers.ApiController.listAllSuggestedSolrFields(solrIndexId: String)
PUT     /api/v1/:solrIndexId/suggested-solr-field               controllers.ApiController.addNewSuggestedSolrField(solrIndexId: String)
DELETE  /api/v1/:solrIndexId/suggested-solr-field/:suggestedFieldId controllers.ApiController.deleteSuggestedSolrField(solrIndexId: String, suggestedFieldId: String)
GET     /api/v1/allRulesTxtFiles                                controllers.ApiController.downloadAllRulesTxtFiles
POST    /api/v1/:solrIndexId/import-from-rules-txt              controllers.ApiController.importFromRulesTxt(solrIndexId: String)
GET     /api/v1/log/deployment-info                             controllers.ApiController.getLatestDeploymentResult(solrIndexId: String, targetSystem: String)
GET     /api/v1/:solrIndexId/rules-and-spellings                controllers.ApiController.listAll(solrIndexId: String)
PUT     /api/v1/:solrIndexId/spelling                           controllers.ApiController.addNewSpelling(solrIndexId: String)
POST    /api/v1/:solrIndexId/spelling/:canonicalSpellingId      controllers.ApiController.updateSpelling(solrIndexId: String, canonicalSpellingId: String)
DELETE  /api/v1/spelling/:canonicalSpellingId                   controllers.ApiController.deleteSpelling(canonicalSpellingId: String)
GET     /api/v1/spelling/:canonicalSpellingId                   controllers.ApiController.getDetailedSpelling(canonicalSpellingId: String)
GET     /api/v1/log/rule-activity-log                           controllers.ApiController.getActivityLog(inputId: String)
GET     /api/v1/report/rules-report/:solrIndexId                controllers.ApiController.getRulesReport(solrIndexId: String)
GET     /api/v1/report/activity-report/:solrIndexId             controllers.ApiController.getActivityReport(solrIndexId: String)
GET     /api/v1/version/latest-info                             controllers.ApiController.getLatestVersionInfo()
PUT     /api/v1/user                                            controllers.ApiController.addUser
GET     /api/v1/user/:userId                                    controllers.ApiController.getUser(userId: String)
POST    /api/v1/user/:userId                                    controllers.ApiController.updateUser(userId: String)
DELETE  /api/v1/user/:userId                                    controllers.ApiController.deleteUser(userId: String)
GET     /api/v1/user                                            controllers.ApiController.listAllUsers
GET     /api/v1/user/lookup/email/:email                        controllers.ApiController.lookupUserByEmail(email: String)
GET     /api/v1/user/:userId/team                               controllers.ApiController.lookupTeamIdsByUserId(userId: String)
PUT     /api/v1/user/:userId/team/:teamId                       controllers.ApiController.addUser2Team(userId: String, teamId: String)
DELETE  /api/v1/user/:userId/team/:teamId                       controllers.ApiController.deleteUser2Team(userId: String, teamId: String)
PUT     /api/v1/team                                            controllers.ApiController.addTeam
GET     /api/v1/team/:teamId                                    controllers.ApiController.getTeam(teamId: String)
POST    /api/v1/team/:teamId                                    controllers.ApiController.updateTeam(teamId: String)
DELETE  /api/v1/team/:teamId                                    controllers.ApiController.deleteTeam(teamId: String)
GET     /api/v1/team                                            controllers.ApiController.listAllTeams
GET     /api/v1/team/:teamId/user                               controllers.ApiController.lookupUserIdsByTeamId(teamId: String)
GET     /api/v1/team/:teamId/solr-index                         controllers.ApiController.lookupSolrIndexIdsByTeamId(teamId: String)
PUT     /api/v1/team/:teamId/solr-index/:solrIndexId            controllers.ApiController.addTeam2SolrIndex(teamId: String, solrIndexId: String)
DELETE  /api/v1/team/:teamId/solr-index/:solrIndexId            controllers.ApiController.deleteTeam2SolrIndex(teamId: String, solrIndexId: String)

# Map static resources from the /public folder to the /assets URL path
GET     /*file   controllers.FrontendController.assetOrDefault(file)
